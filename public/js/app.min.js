
/*jshint browser:true, jquery:true */
/*globals NV:true, d3:true, console:false, crossfilter:true */

(function () {

'use strict';

/*
   Private functions
*/

// handle window resizes
$(window).resize(function() {
  NV.treemapView.resize();
});


/*
   Document Ready
*/
$(function(){
  // start the router history
  NV.start({pushState: true});
});


/*
  Public functions
  any?
*/
return {
};

}());

// used to move svg element to front
// https://groups.google.com/forum/?fromgroups#!searchin/d3-js/scope/d3-js/eUEJWSSWDRY/XWKLd3QuaAoJ
d3.selection.prototype.moveToFront = function() { 
  return this.each(function() { 
    this.parentNode.appendChild(this); 
  }); 
}; 

// taken from https://groups.google.com/forum/?fromgroups=#!topic/d3-js/pTVgFuEgCfY
d3.stringWidth = function(svg, string, font, aclass) {
    var f = font || '12px arial';

    var text = svg.append('text')
        .attr('class', aclass)
        .style('font', f)
        .style('opacity', 0)
        .style('visibility', 'hidden')
        .style('display', 'inline')
        .text(string);

    var width = text.node().getComputedTextLength();

    d3.select(text).remove();

    return width;
};

var ColorLegend = Backbone.Model.extend({
    
  initialize: function() {
    this.makeScales(10.0);

    // color palettes
    var change    = [ 'fixed', 'open', 'new' ]
      , nochange  = [ 'severity' ];
    
    // default to nochange
    this.set('activeColors', nochange);

    // respond to changes on vis type
    this.get('datasource').on('change:isChangeVis', function(){
      var isChangeVis = this.get('datasource').get('isChangeVis');

      if( isChangeVis )
        this.set('activeColors', change);
      else
        this.set('activeColors', nochange);

    }, this);
  },

  // makes scales with domains: [0, high]
  makeScales: function(high){
    // define colors
    var multihue = ['#F1EEF6', '#E5E7FF', '#DFE0F7', '#CAD5ED', '#A6BDDB', '#74A9CF', '#3690C0', '#0570B0', '#045A8D', '#3578A0'];

    var lowColor    = d3.hsl('#F1EEF6');
    var highColor   = d3.hsl('#2B8CBE');
    var fixedColor  = d3.hsl('#405E50');
    var newColor    = d3.hsl('#AD009F');
    var openColor   = d3.hsl('#FFCF40');
    
    // define scales
    var severityScale = d3.scale.quantize()
      .domain([0.0, high])
      .range(multihue);

    var fixedScale = d3.scale.linear()
      .domain([0.0, high])
      .range([lowColor, fixedColor])
      .clamp(true);
    
    var openScale = d3.scale.linear()
      .domain([0.0, high])
      .range([lowColor, openColor])
      .clamp(true);

    var newScale = d3.scale.linear()
      .domain([0.0, high])
      .range([lowColor, newColor])
      .clamp(true);

    this.set('severity', severityScale);
    this.set('fixed', fixedScale);
    this.set('open', openScale);
    this.set('new', newScale);
  }
});

var Hierarchy = Backbone.Model.extend({

  initialize: function() {

    // define and set our initial hierarchy

    var _hierarchy = [
      { target: 'nv' },
      { useData: true, target: 'ip' },
      { prefix: ':', useData: true, target: 'port' },
      { prefix: 'id', useData: true, target: 'vulnid' }
    ];

    // set the data initially (silently)
    this.set({data: _hierarchy, silent: true});

    // event handling
  
    // on changes to isChangeVis (bool), set/remove state accordingly
    this.get('datasource').on('change:isChangeVis', function(){
      var isChangeVis = this.get('datasource').get('isChangeVis'),
          hierarchy = this.get('data');

      // filter out state; else append it
      if(!isChangeVis){
        hierarchy = _.filter( hierarchy, function(d) { return d.target !== 'state'; } );
      } else {
        hierarchy.push({ useData: true, target: 'state' });
      }

      // TODO why do we have to trigger the change event manually?
      this.set('data', hierarchy);
      this.trigger('change:data');
    }, this);

    // TODO this code can be used when the groups pages has been rewritten
    //  in backbone, the following is a temporary fix
    // on changes to groups, set/remove group accordingly
//    this.get('datasource').on('change:groups', function(){
//      var groups = this.get('datasource').get('groups'),
//          hierarchy = this.get('data');
//
//      // filter out state; else append it
//      if(groups.size < 1){
//        hierarchy = _.filter( hierarchy, function(d) { return d.target !== 'group'; } );
//      } else {
//        hierarchy.push({ useData: true, target: 'group' });
//      }
//
//      // TODO why do we have to trigger the change event manually?
//      this.set('data', hierarchy);
//      this.trigger('change:data');
//    }, this);

     // TODO see above: add groups to hierarchy
     this.get('datasource').on('change:groups', function(){
      var hierarchy = this.get('data');

      var hasGroup = _.find(hierarchy, function(d) { return d.target === 'group'; });


      if(!hasGroup)
        hierarchy.splice(1, 0, { useData: true, target: 'group' });

      this.set('data', hierarchy);
      this.trigger('change:data');

     }, this);

    // on hierarchy change, make this our new hierarchy
    this.get('app').on('hierarchyChange', function(h){
      this.set('data', h);
    }, this);
  }
});

var Histogram = Backbone.Model.extend({
  initialize: function() {
    // respond to app-level events
    this.get('datasource').on('dataset updated', this.updateData, this);
  },

  updateData: function(){
    var filterOptions   = this.get('filterOptions')
      , attribute       = filterOptions.attribute
      , bins            = this.get('bins') || ""
      , range            = this.get('range') || ""
      , datamap         = this.get('datamap') || "";

    var rawData = this.get('datasource').getData(filterOptions);

    // compute histogram based on attribute value
    var histogram = d3.layout.histogram()
        .value(function(d) { 
          // if we have a datamap, use it
          return datamap ? datamap(d[attribute]) : d[attribute]; 
        });

    // if bins specified, set them
    if( bins )
      histogram.bins(bins);
  
    // if bins specified, set them
    if( range )
      histogram.range(range);

    // compute the histogram
    var data = histogram(rawData); 

    // if a limit is specified, sort and cut the data
    if( this.get('limit') ){

      // sort the data by length (ascending) and reverse
      data = _.sortBy(data, function(d){ return d.length; }).reverse();

      // cut off after limit
      if ( data.length > this.get('limit') )
        data = _.first(data, this.get('limit'));
    } 

    // set labels. if bins are specified, use numbers
    //  otherwise use the category (data + attribute)
    var labels;
    if( bins ) {

      labels = data.map( function(d, i) { 
        // if we have a datamap, access the domain to get the labels correct
        return datamap ? datamap.domain()[i] : i+1; 
      });

    } else {

      labels = data.map( function(d) { 
        // TODO some NOTES have no data, not sure why, this is a workaround
        if (d[0])
          return d[0][attribute]; 
      });

    }

    // TODO combine label and length in data attribute
    this.set('data', data.map(function(d, i) {
      return {
        length: d.length,
        label: labels[i]
      };
    }) );  

  }
});

var Nessus = Backbone.Model.extend({

  initialize: function() {

    // create our crossfilter
    this.logs = crossfilter();

    // create dimensions and add to logs (our crossfilter)
    var app = this;
    $.each( this.get('dimensions'), function(i, v){
      app["by"+v] = app.logs.dimension( function(d) { return d[v]; } );
    });

    // is this a comparison vis? this is modified by others
    this.isChangeVis = false;
  },

// data query functions
  
  // TODO examples update for nv
  // TODO incorporate categorical filter from situ-vis
  //  Return events from crossfilter based on options in spec as follows:
  //  - useGlobalFilters: whether the model wants to obey any global filters
  //  - filters: an array of model-specific filters which can overwrite 
  //      matching global filters (format: [{attribute, rangeMin, rangeMax}, ...])
  //  - limit: limitation on amount of data sent back
  //  - attribute: which crossfilter dimension to use for getting data
  // 
  //  examples:
  //  the 50 most recent events:
  //  spec = {attribute:"timestamp", limit:50} 
  // 
  //  all events with malice scores between 0.3 and 0.5 and anomaly scores b/w 4 and 10:
  //  spec = { 
  //  filters:
  //     [
  //       {attribute:"maliceScore", rangeMin:0.3, rangeMax:0.5}, 
  //       {attribute:"anomalyScore", rangeMin:4, rangeMax:10}
  //     ]
  //  }   
  getData: function(spec){
    var config    =  spec || {}
      , limit     =  config.limit || Infinity;

    // use global filters or clear all filters
    if( config.useGlobalFilters )
      this.activateFilters( this.get('filters') );
    else 
      this.clearFilters();
   
    // activate local filters if they exist
    if( config.filters && config.filters.length > 0 )
      this.activateFilters(config.filters);

    // get data, clear filters, return data 
    var d = this['by'+config.attribute].top(limit);
    this.clearFilters();
    return d;
  },


// data modification functions

  setData: function(dataset){
    // empty dataset if needed
    if(this.logs.size() > 1)
      this.logs = crossfilter();

    this.logs.add(dataset);
    this.trigger('dataset updated');
  },

  // filters come from URLs, so we must parse them here
  updateFilter: function(f){
    // break them apart
    var entries = f.split(';');
    
    // add each to our filters list
    var divided = entries.map(function(d) { return d.split(','); });
    
    // convert to objects
    var filters = divided.map(function(d) { 
      return { attribute:d[0], rangeMin:d[1], rangeMax:d[2] }; 
    });

    this.set('filters', filters);

    // trigger a filterChange that models listen for
    this.trigger('filterChange', filters);
  },

  // iterate through filters and activate as necessary
  activateFilters: function(f){
    var filters = f || [];

    if( filters.length < 1 )
      return;

    var app = this;
    $.each(filters, function(i, v){
      if( v.exact )
        app['by'+v.attribute].filter( v.exact );
      else
        app['by'+v.attribute].filter( [v.rangeMin, v.rangeMax] );
    });
  },

  // clears all current filters
  clearFilters: function(){
    var app = this;
    $.each(this.get('dimensions'), function(i, v){
      app['by'+v].filterAll();
    });
  }

});

var NessusInfo = Backbone.Model.extend({
    
  initialize: function() {
    var self = this;

    this.get('app').on('treemap_mouseover', function(key){
      if( key.indexOf('id') !== -1 ){
        key = key.replace('id', '');
        this.updateData(key);
      }
    }, this);

    // respond to a mouseover on histogram
    this.get('app').on('histogramMouseover', function(msg){
      if( msg.chart.indexOf('notes') !== -1 || msg.chart.indexOf('holes') !== -1 ){
        this.updateData( msg.label );
      }
    }, this);
    
    // load vulnerability ids
    $.get("data/vulnIDs.json", function(data) {
      self.set('vulnIdInfo', data);
    });
  },

  updateData: function(vulnid){
    var vulnInfo = this.get('vulnIdInfo')[vulnid];
    // add vulnid to data
    vulnInfo.vulnid = vulnid;
    this.set('data', vulnInfo);
  }
});

var Treemap = Backbone.Model.extend({
  initialize: function() {

    // set our default size and color option
    this.set('sizeOption', 'cvss');
    this.set('colorOption', 'cvss');

    // respond to app-level events
    this.get('datasource').on('dataset updated', this.updateData, this);
    this.on('change:sizeOption', this.updateData, this);
    this.on('change:colorOption', this.updateData, this);
    this.on('change:filterOptions', this.updateData, this);
    this.get('hierarchy').on('change', this.updateData, this);

    this.get('app').on('histogramClick', function(msg){

      if(msg.state === "off"){
        updateFilter('remove');
      } else if(msg.chart === "cvss"){
        // labels are 1 higher than actual
        msg.label = msg.label-1;
        // coerce things to work with crossfilter queries
        updateFilter('cvss', msg.label+0.0, msg.label+1.01);
      } else if(msg.chart === "vuln type"){
        updateFilter('vulntype', msg.label);
      } else if(msg.chart === "top holes"){
        updateFilter('vulnid', msg.label);
      } else if(msg.chart === "top notes"){
        updateFilter('vulnid', msg.label);
      }

    });

    // make an updateFilter function
    var self = this;
    var updateFilter = function updateFilter(attr, value, valueEnd){
      var filterOptions   = self.get('filterOptions');

      if(attr === 'remove'){
        filterOptions.filters = null;
      } else if(valueEnd){
        filterOptions.filters = [
          { attribute:attr, rangeMin:value, rangeMax: valueEnd }
        ];
      } else {
        filterOptions.filters = [
          { attribute:attr, exact:value }
        ];
      }

      self.set('filterOptions', filterOptions);
      self.updateData();
    };

  },

  updateData: function(){
    var filterOptions   = this.get('filterOptions')
      , attribute       = filterOptions.attribute
      , hierarchy       = this.get('hierarchy').get('data');

    var rawData = this.get('datasource').getData(filterOptions);

    // check if our filters end up excluding everything
    if(rawData.length < 1){
      console.log('current filter yields no data, try another');
      return;
    }

    var root = applyhierarchy(hierarchy);

    function applyhierarchy(hierarchy){
      var nest = d3.nest();

      // loop hierarchy and apply key functions based on hierarchy object 
      _.each(hierarchy, function(h){

        nest.key(function(d){

          if(h.useData){
            if(h.prefix)
              return h.prefix+d[h.target];
            else
              return d[h.target];
          } else {
            return h.target;
          }

        });

      });

      nest.sortKeys(d3.ascending);
      return nest.entries(rawData);
    }

    // free the root from its original array
    root = root[0];

    this.accumulate(root);

    // set data to the lengths of the data
    this.set('data', root);  
  }, 

  // aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // 
  // TODO: can we generalize the accumulate functions for multiple attributes?
  accumulate: function(d) {
    var app = this;

    function accumulateCount(d){
      return d.values ? 
        d.count = d.values.reduce(function(p, v) { return p + accumulateCount(v); }, 0) :
        d.value;
    }

    function accumulateCVSS(d){
      return d.values ? 
        d.cvss = d.values.reduce(function(p, v) { return Math.max(p, accumulateCVSS(v)); }, 0) :
        d.cvss;
    }

    function accumulateCriticality(d){
      return d.values ? 
        d.criticality = d.values.reduce(function(p, v) { return Math.max(p, accumulateCriticality(v)); }, 0) :
        d.criticality;
    }

    function accumulateState(d){
      return d.values ?
        d.state = d.values.reduce(function(p, v) { return accumulateState(v); }, 0) :
        d.state;
    }

    function accumulateFixedCounts(d){
      return d.values ?
        d.fixedCount = d.values.reduce(function(p, v) { return p + accumulateFixedCounts(v); }, 0) :
        d.state === 'fixed' ? 1 : 0;
    }
    
    function accumulateOpenCounts(d){
      return d.values ?
        d.openCount = d.values.reduce(function(p, v) { return p + accumulateOpenCounts(v); }, 0) :
        d.state === 'open' ? 1 : 0;
    }

    function accumulateNewCounts(d){
      return d.values ?
        d.newCount = d.values.reduce(function(p, v) { return p + accumulateNewCounts(v); }, 0) :
        d.state === 'new' ? 1 : 0;
    }

    d.cvss = accumulateCVSS(d);
    d.count = accumulateCount(d);
    d.criticality = accumulateCriticality(d);

    if( this.get('datasource').get('isChangeVis') ){
      d.state = accumulateState(d);
      d.fixedCount = accumulateFixedCounts(d);
      d.openCount = accumulateOpenCounts(d);
      d.newCount = accumulateNewCounts(d);
    }

    return d.values ?
      d.value = d.values.reduce(function(p, v) { return p + app.accumulate(v); }, 0) :
      d[this.get('sizeOption')];
  }
});

var ColorLegendView = Backbone.View.extend({

  initialize: function() {
    // render on model update
//    this.model.on('change:activeColors', this.render, this);
    this.model.on('change', this.render, this);

    this.render();
  },

  render: function(){

    var legendWidth = 150
      , legendHeight = 30
      , labelY = 26
      , boxSize = 15;

    var activeColors = this.model.get('activeColors')
      , div = d3.select(this.options.target)
      , self = this;

    var entries = div.selectAll('.legendEntry')
      .data(activeColors, function(d) { return d; });
    
    var svgs = entries.enter().append('div')
      .classed('legendEntry', true)
      .append('svg')
      .attr('width', legendWidth)
      .attr('height', legendHeight);

    svgs.selectAll('rect')
      .data(d3.range(1,10))
      .enter().append('rect')
      .attr('width', boxSize)
      .attr('height', boxSize)
      .attr('x', function(d, i) { return i*boxSize; })
      .style('fill', function(d, i) { 
        var type = d3.select(this.parentNode).datum();
        var scale = self.model.get(type);
        return scale(i); 
      })
      .style('stroke', function(d, i) { 
        var type = d3.select(this.parentNode).datum();
        var scale = self.model.get(type);
        return scale(i); 
      });

    // append labels
    svgs.append('text')
      .attr('x', legendWidth/2)
      .attr('y', labelY)
      .attr('text-anchor', 'middle')
      .text( function(d) { return d; } );

    svgs.append('text')
      .attr('x', 0)
      .attr('y', labelY)
      .attr('text-anchor', 'start')
      .classed('legend_min', true);

    svgs.append('text')
      .attr('x', legendWidth - boxSize)
      .attr('y', labelY)
      .attr('text-anchor', 'end')
      .classed('legend_max', true);

    // update labels
    entries.select('.legend_min')
      .text( function(d) { 
        return self.model.get(d).domain()[0];
      });

    entries.select('.legend_max')
      .text( function(d) { 
        return self.model.get(d).domain()[1];
      });

    entries.exit().remove();
  }
});

var HierarchyView = Backbone.View.extend({

  initialize: function() {
    //create the list
    var list = d3.select(this.options.target).append('ul');

    //respond to hierarchy changes
    this.model.on('change:data', this.render, this);
    
    // initial render
    this.render();
  },

  render: function() {
    var list = d3.select(this.options.target).select('ul')
      , hierarchy  = this.model.get('data')
      , self       = this;

    // remove all old
    list.selectAll('li').remove();
  
    // build the list based on the initial hierarchy
    var listItems = list.selectAll('li')
      .data(hierarchy, function(d) { return d.target; });

    listItems.enter().append('li')
      .attr('class', function(d){
        if(d.target === 'nv')
          return 'hierarchyNode ui-state-disabled';
        else
          return 'hierarchyNode';
      })
      .text(function(d) { return d.target; })
      .append('i')
      .attr('class', function(d){
        if(d.target !== 'nv')
          return 'icon-resize-horizontal';
      });

    listItems.exit().remove();

    // make the list sortable
    $('#hierarchy ul').sortable({
      items: "li:not(.ui-state-disabled)",

      cursor: "move",

      // on drop (stop), emit the new hierarchy
      stop: function(event, ui) {
        var h = [];

        // get each data item in the list (in order)
        $("#hierarchy li").each(function(i, el){
          h.push( d3.select(el).datum() );
        });

        self.options.app.trigger('hierarchyChange', h);
      }
    });
  }

});

var HistogramView = Backbone.View.extend({

  initialize: function() {
    // listen for model changes
    this.model.on('change:data', this.render, this);

    // init a d3 histogram
    d3.select(this.options.target)
      .append('svg')
      .attr('height', this.options.h);
  },

  // TODO implement @mbostock's margins (http://bl.ocks.org/3019563)
  render: function(){
    var vis         = d3.select(this.options.target).select('svg')
      , app         = this.model.get('app')
      , data        = this.model.get('data')
      , range       = this.options.range
      , attribute   = this.model.get('attribute')
      , view        = this
      , h           = this.options.h
      , barwidth    = this.options.barwidth
      , title       = this.options.title
      , that        = this
      , numBins     = data.length
      , barspace    = 2
      , rect        = vis.selectAll('.bar')
      , rectLabels  = vis.selectAll('.histogramLabel')
      , titleLabel  = vis.selectAll('.histogramtitle');

    var containerWidth = $(document).innerWidth();
    
    var w = (barwidth + barspace) * numBins;
    vis.attr('width', w);

    // y scale for bars
    var y = d3.scale.linear()
              .domain([0, d3.max(data, function(d) { return d.length; })])
              .range([1, h-40]);

    // enter
    rect.data(data, function(d) { return d.length; })
        .enter().append('rect')
        .classed('bar inactive', true)
        .on('click', function() { barClick(this); })
        .on('mouseover', function() { barMouseOver(this); })
        .attr('width', barwidth)
        .attr('height', function(d, i) { return y(d.length); })
        .attr('x', function(d, i) { return i*(barwidth+barspace); })
        .attr('y', function(d, i) { return h - 45 - y(d.length); });

    // update

    //x-axis labels for bars
    rectLabels.data(data, function(d) { return d.label; })
      .enter().append('text')
      .attr('class', 'histogramlabel')
      .attr('x', function(d, i) { return i*(barwidth+barspace) + barwidth/2; })
      .attr('y', h - 35)
      .attr('text-anchor', 'middle')
      .text( function(d) { return d.label; });

    //title
    titleLabel.data([title])
      .enter().append('text')
      .attr('class', 'histogramtitle')
      .attr('x', w / 2 )
      .attr('y', h - 20)
      .attr('text-anchor', 'middle')
      .text(title);


    // on bar mouseover, emit the chart title and label of the selected
    var barMouseOver = function barMouseOver(d) {   
      var msg = {
        chart: title,
        label: d3.select(d).data()[0].label
      };

      that.options.app.trigger('histogramMouseover', msg);
    };

    // On bar click, emit the chart title, label, and bar size of the selected.
    //   If the bar is already selected, remove all filters
    var barClick = function barClick(d) {
      var sel = d3.select(d)
        , active = sel.classed('active');

      // get the data for the clicked element
      var data = d3.select(d).data()[0];

      // prepare the message to send to the app
      var msg = {
        label: data.label,
        length: data.length,
        chart: that.options.title
      };

      // if cvss histogram, decrease label by 1 to get correct selection
      // if( msg.chart.indexOf('cvss') !== 1 ){
      //     console.log(msg);
      //     msg.label = msg.label-1;
      // }

      // make all bars inactive
      d3.selectAll('.bar').classed('active', false);
      d3.selectAll('.bar').classed('inactive', true);

      // activate this one if it's not active, else just send off message
      if( !active ){
        sel.classed('active', true);
        sel.classed('inactive', false);
        msg.state = 'on';
      } else {
        msg.state = 'off';
      }

      // trigger an event and attach the message
      that.options.app.trigger('histogramClick', msg);
    };
  }
});

var NessusInfoView = Backbone.View.extend({

  initialize: function() {
    // render on model update
    this.model.on('change:data', this.render, this);

    var div = $(this.options.target);

    // initialize to help the user see what the view is about
    div.html('<hr><p>');
    div.append('Nessus Info View'+ '<br /><br />');
    div.append('ID: ' + '<br />');
    div.append('Title: ' + '<br />');
    div.append('Family: ' + '<br />');
    div.append('Synopsis: ' + '<br />');
    div.append('Description: ' + '<br />');
    div.append('UpdateInfo: ' + '<br />');
    div.append('Solution: ' + '<br />');
    div.append('</p>');

  },

  render: function(){
    var data = this.model.get('data');

    var div = $(this.options.target);

    div.html('<hr><p>');

    div.append('ID: ' + data.vulnid + '<br />');

    div.append('Title: ' + data.title + '<br />');

    if(data.family && data.family !== '')
      div.append('Family: ' + data.family + '<br />');
      
    if(data.otherInfoList.length > 0)
      div.append(data.otherInfoList[0] + '<br />');

    div.append('<br />');

    if(data.synopsis && data.synopsis !== '')
      div.append('Synopsis: ' + data.synopsis + '<br /><br />');

    if(data.description && data.description !== '')
      div.append('Description: ' + data.description + '<br /><br />');

    if(data.updateInfo && data.updateInfo !== '')
      div.append('UpdateInfo: ' + data.updateInfo + '<br /><br />');

    if(data.solution && data.solution !== '')
      div.append('Solution: ' + data.solution);

   //TODO deal with these later.
   //div.append('bugtraqList: '   + data.bugtraqList);
   //div.append('cveList: '       + data.cveList);
   //div.append('otherInfoList: ' + data.otherInfoList);

    div.append('</p>');
  }
});

var TreemapView = Backbone.View.extend({

  initialize: function() {
    // listen for model changes
    this.model.on('change:data', this.render, this);
    this.options.app.on('hierarchyChange', this.render, this);

    // globals
    this.margin = {top: 20, right: 20, bottom: 0, left: 0};
    this.width = 960; 
    this.height = 500 - this.margin.top - this.margin.bottom;
    this.formatNumber = d3.format(',d');
    this.transitioning = false;

    // init treemap scales and layout
    this.x = d3.scale.linear();
    this.y = d3.scale.linear();
    this.treemap = d3.layout.treemap();
    
    // add svg and group to the vis
    this.svg = d3.select('#vis')
      .append('svg')
      .append('g');
    
    // append grandparent (the clickable rect at top of treemap)
    this.grandparent = this.svg.append('g')
      .attr('class', 'grandparent');
    
    // add rect and text to grandparent
    this.grandparent.append('rect');
    this.grandparent.append('text');
  },

  render: function(){
    var root = this.model.get('data');
    var self = this;

    // remove all .depth, since subsequent renders produce duplicates
    d3.selectAll('.depth').remove();

    // get container width
    this.width = $('#vis').width();

    // set up x and y scales
    self.x.domain([0, self.width])
      .range([0, self.width]);

    self.y.domain([0, self.height])
      .range([0, self.height]);

    // set up treemap layout
    self.treemap.children(function(d, depth) { return depth ? null : d.values; })
      .sort(function(a, b) { return a.value - b.value; })
      .ratio(self.height / self.width * 0.5 * (1 + Math.sqrt(5)))
      .round(false);

    // set svg dimensions
    d3.select('#vis svg')
      .attr('width', self.width + self.margin.left + self.margin.right)
      .attr('height', self.height + self.margin.bottom + self.margin.top)
      .style('margin-left', -self.margin.left + 'px')
      .style('margin-right', -self.margin.right + 'px');

    // set svg group dimensions (the nodes are drawn here)
    d3.select('#vis svg g')
        .attr('transform', 'translate(' + self.margin.left + ',' + self.margin.top + ')');

    // set grandparent rect dimensions
    d3.select('#vis svg .grandparent rect')
      .attr('y', -this.margin.top)
      .attr('width', this.width)
      .attr('height', this.margin.top);

    // set grandparent text dimensions
    d3.select('#vis svg .grandparent text')
      .attr('x', 6)
      .attr('y', 6 - this.margin.top)
      .attr('dy', '.75em');

    // render the treemap
    initialize(root);
    layout(root);
    display(root);
  
    function initialize(root) {
      root.x = root.y = 0;
      root.dx = self.width;
      root.dy = self.height;
      root.depth = 0;
    }
   
    // Compute the treemap layout recursively such that each group of siblings
    // uses the same size (1 x 1) rather than the dimensions of the parent cell.
    // This optimizes the layout for the current zoom state. Note that a wrapper
    // object is created for the parent node for each group of siblings so that
    // the parent's dimensions are not discarded as we recurse. Since each group
    // of sibling was laid out in 1 x 1, we must rescale to fit using absolute
    // coordinates. This lets us use a viewport to zoom.
    function layout(d) {
      if (d.values) {
        self.treemap.nodes({values: d.values});
        d.values.forEach(function(c) {
          c.x = d.x + c.x * d.dx;
          c.y = d.y + c.y * d.dy;
          c.dx *= d.dx;
          c.dy *= d.dy;
          c.parent = d;
          layout(c);
        });
      }
    }
   
    function display(d) {
      var data = d;

      self.grandparent
        .datum(d.parent)
        .on('click', transition)
        .select('text')
        .text( name(d));
  
      var g1 = self.svg.insert('g', '.grandparent')
        .datum(d)
        .attr('class', 'depth');
  
      var g = g1.selectAll('g')
        .data(d.values)
        .enter().append('g');
  
      g.filter(function(d) { return d.values; })
        .classed('children', true)
        .attr('id', function(d) { return 'IP' + (d.key).replace(/\./g, ''); })
        .on('click', function(d) {
          if(!atTheBottom(d))
            transition(d);
        })
        .on('mouseover', function(d) {
          // Emit an event with the key 
          self.options.app.trigger('treemap_mouseover', d.key);

          // move this element to front (ensures highlight is visible)
          d3.select(this).moveToFront();

          d3.select(this).select('.parent')
          .style('stroke', 'black')
          .style('stroke-width', '2px');
  
        })
        .on('mouseout', function(d) {
        
            d3.select(this).select('.parent')
              .style('stroke', '')
              .style('stroke-width', '');

            // fix any bolding
            d3.select(this).select('text')
              .style('font-weight', 'normal');
  
        });
  
      // NOTE: can move the .style here to rect() to color by cell
      g.selectAll('.child')
        .data(function(d) { return d.values || [d]; })
        .enter().append('rect')
        .attr('class', 'child')
        .style('fill', function(d) { 
          var opt = self.model.get('colorOption');
          var type = 'severity';
          var scale = self.options.color.get(type);

          // if status, use appropriate color scale
          if(d.state){

            // reset d.state here according to max counts
            var maxStateIndex = maxIndex([d.fixedCount, d.newCount, d.openCount]);
  
            d.state = maxStateIndex === 0 ? 'fixed' : maxStateIndex === 1 ? 'new' : 'open';
  
            // choose which scale to use
            if(d.state === 'new')
              scale = self.options.color.get('new');
  
            if(d.state === 'open')
              scale = self.options.color.get('open');
  
            if(d.state === 'fixed')
              scale = self.options.color.get('fixed');
          }

          // if count, change scale
          if( opt === 'count' ){
            self.options.color.makeScales(data.values.length);
          } else {
            self.options.color.makeScales(10.0);
          }

          return scale(d[opt]);
        })
      .call(rect);
  
      // append a rect 
      g.append('rect')
        .attr('class', 'parent')
        .call(rect)
        .text(function(d) { return self.formatNumber(d.value); })
        .append('title').text(function(d) { return d.key; });

      $('.parent').tipsy({ 
        fade: true, 
        delayIn: 777,
        gravity: $.fn.tipsy.autoNS,
        html: true,
        title: function() {
          var d = this.__data__;
          return d.key + 
                 '<br /> max cvss: ' + d.cvss + 
                 '<br /> vuln count: ' + d.count; 
        }
      });
  
      // append label for this node
      g.append('text')
        .attr('dy', '.75em')
        .attr('text-anchor', 'left')
        .text(function(d) { 
          return d.key;
        })
        .classed('rectlabel', true)
        .call(text);
  
      function transition(d) {
        if (self.transitioning || !d){ 
          return; 
        }
  
        self.transitioning = true;
  
        var g2 = display(d),
            t1 = g1.transition().duration(1250),
            t2 = g2.transition().duration(1250);
  
        // Update the domain only after entering new elements.
        self.x.domain([d.x, d.x + d.dx]);
        self.y.domain([d.y, d.y + d.dy]);
  
        // Enable anti-aliasing during the transition.
        self.svg.style('shape-rendering', null);
  
        // Draw child nodes on top of parent nodes.
        self.svg.selectAll('.depth').sort(function(a, b) { return a.depth - b.depth; });
  
        // Fade-in entering text.
        g2.selectAll('text').style('fill-opacity', 0);
  
        // Transition to the new view.
        t1.selectAll('text').call(text).style('fill-opacity', 0);
        t2.selectAll('text').call(text).style('fill-opacity', 1);
        t1.selectAll('rect').call(rect);
        t2.selectAll('rect').call(rect);
  
        // Remove the old node when the transition is finished.
        t1.remove().each('end', function() {
          self.svg.style('shape-rendering', 'crispEdges');
          self.transitioning = false;

          // remove oversized labels after a transition
          labelSizeTweak();
        });
      }
  
      // remove any oversized labels before returning
      labelSizeTweak();

      return g;
    }

    // tells you if the selected element is at the bottom of the hierarchy
    // which is an id, in our case...
    function atTheBottom(d){
      if(d.values && d.values.length === 1 && d.values[0].vulnid)
        return true;
      else
        return false;
    }

    // return the max index in an array
    function maxIndex(arr){
      var max_index = -1;
      var max_value = Number.MIN_VALUE;
      for(var i = 0; i < arr.length; i++)
      {
        if(arr[i] > max_value)
        {
          max_value = arr[i];
          max_index = i;
        }
      }
      return max_index;
    }

    function labelSizeTweak(){
      // select all labels in the treemap and make sure they fit
      d3.selectAll('.rectlabel')
        .transition()
        .text(function(d) { 
          // note: stringWidth is a custom d3 function defined in util.js
          var parentWidth = d3.select(this.parentNode).select('.parent').attr('width')
            , nodeWidth   = d3.stringWidth(d3.select(this.parentNode), d.key, null, 'rectlabel');

          return nodeWidth < parentWidth ? d.key : "..."; 
        });
    }
      
    function text(t) {
      t.attr('x', function(d) { return self.x(d.x) + 6; })
       .attr('y', function(d) { return self.y(d.y) + 6; });
    }
  
    function rect(r) {
      r.attr('x', function(d) { return self.x(d.x); })
       .attr('y', function(d) { return self.y(d.y); })
       .attr('width', function(d) { return self.x(d.x + d.dx) - self.x(d.x); })
       .attr('height', function(d) { return self.y(d.y + d.dy) - self.y(d.y); });
    }
  
    function name(d) {
      return d.parent ?
        name(d.parent) + '_' + d.key :
        d.key;
    }
  }, 
  
  resize: function(){
    // set this view's width based on the new container width
    this.width = $('#vis').width();

    // reset the x scale domain
    this.x.domain([0, this.width]).range([0, this.width]);

    // resize our svg (and grandparent)
    d3.select("#vis > svg").attr("width", this.width + this.margin.left + this.margin.right);
    d3.selectAll(".grandparent rect").attr("width", this.width);
    this.treemap.ratio(this.height / this.width * 0.5 * (1 + Math.sqrt(5)));

    this.render();
  }

});

// The router is our entire app
var NV = new (Backbone.Router.extend({
  routes: {
    "": "index"
  },

  // instantiate/link views and models
  initialize: function(){
    // the crossfilter holder
    this.nessus           =  new Nessus({
                             dimensions: [ 'ip', 
                                           'port',
                                           'cvss',
                                           'vulnid',
                                           'vulntype']
                           });

  // models and views

    // cvss (severity) histogram
    
    this.cvssHistogram        =   new Histogram({  
                                  app: this,
                                  datasource: this.nessus, 
                                  bins: 10, 
                                  range: [0, 10], 
                                  filterOptions: { attribute:'cvss' }
                               });

   this.cvssHistogramView    =   new HistogramView({
                                 app: this,
                                 model: this.cvssHistogram,
                                 target:'#cvssHistogram',
                                 barwidth: 20,
                                 w: 220,
                                 h: 165,
                                 title: 'cvss'
                              });

    // vulnerability type histogram

      // NOTE: This is a hack to make categorical histograms.
      // If d3 somehow supports non-numerical histograms, we can remove this
      // and lighten the histogram model considerably.
      var vulnTypeMap = d3.scale.ordinal()
          .domain(['hole', 'port', 'note'])
          .range([1,2,3]);

      this.vulnTypeHistogram        =   new Histogram({  
                                        app: this,
                                        datasource: this.nessus, 
                                        bins: 3, 
                                        datamap: vulnTypeMap,
                                        filterOptions: {
                                          attribute: 'vulntype'
                                        }
                                    });

      this.vulnTypeHistogramView    =   new HistogramView({
                                        app: this,
                                        model: this.vulnTypeHistogram,
                                        target:'#vulnTypeHistogram',
                                        barwidth: 20,
                                        w: 66,
                                        h: 165,
                                        title: 'vuln type'
                                    });

    // top notes histogram

    this.topNoteHistogram        =   new Histogram({  
                                     app: this,
                                     datasource: this.nessus, 
                                     limit: 8,
                                     filterOptions: {
                                       attribute: 'vulnid',
                                       filters: [
                                         { attribute:'vulntype', exact:'note' }
                                       ]
                                     }
                                 });

    this.topNoteHistogramView    =  new HistogramView({
                                    app: this,
                                    model: this.topNoteHistogram,
                                    target:'#topNoteHistogram',
                                    barwidth: 30,
                                    w: 180,
                                    h: 165,
                                    title: 'top notes'
                                });
 
    // top holes histogram

    this.topHoleHistogram       =   new Histogram({  
                                    app: this,
                                    datasource: this.nessus, 
                                    limit: 8,
                                    filterOptions: {
                                      attribute: 'vulnid',
                                      filters: [
                                        { attribute:'vulntype', exact:'hole' }
                                      ]
                                    }
                                });

    this.topHoleHistogramView   =   new HistogramView({
                                    app: this,
                                    barwidth: 30,
                                    model: this.topHoleHistogram,
                                    target:'#topHoleHistogram',
                                    w: 180,
                                    h: 165,
                                    title: 'top holes'
                                });

    // treemap hierarchy
    this.hierarchy      =   new Hierarchy({  
                            app: this,
                            datasource: this.nessus
                        });

    this.hierarchyView  =   new HierarchyView({
                            app: this,
                            model: this.hierarchy,
                            target:'#hierarchy'
                        });

    // color view
    this.colorLegend      =   new ColorLegend({  
                              app: this,
                              datasource: this.nessus
                          });

    this.colorLegendView   =   new ColorLegendView({
                              app: this,
                              model: this.colorLegend,
                              target:'#colorlegend'
                          });

    
    // TODO treemap hierarchy view

    // treemap
    this.treemap        =   new Treemap({  
                            app: this,
                            datasource: this.nessus, 
                            hierarchy: this.hierarchy, 
                            filterOptions: {
                              attribute: 'vulnid'
                            }
                        });

    this.treemapView    =   new TreemapView({
                            app: this,
                            model: this.treemap,
                            color: this.colorLegend, 
                            target:'#vis'
                        });



    // info view
    this.nessusInfo       =   new NessusInfo({  
                              app: this,
                              datasource: this.nessus
                          });

    this.nessusInfoView   =   new NessusInfoView({
                              app: this,
                              model: this.nessusInfo,
                              target:'#nessusinfo'
                          });


  },

  // called from outside the app
  start: function(){
    Backbone.history.start();
  }

}))();

// NOTE: in comments 'bb' === 'backbone'

// TODO Mike do we need these? -Lane
var eventList;
var nbeText1 = "";
var nbeText2 = "";
var groupList = [];


// TODO Lane Mike the sizeBy functions are currently connected directly to 
// buttons in index.html. We should create a bb view for the div id="sizeoptions" 
// so we can handle these via bb events.
function sizeBySeverity() {
   NV.treemap.set('sizeOption', 'cvss'); 
}

function sizeByCriticality() {
   NV.treemap.set('sizeOption', 'criticality'); 
}

function sizeByCount() {
   NV.treemap.set('sizeOption', 'value'); 
}

// TODO these would be better in a bb view
function colorBySeverity() {
   NV.treemap.set('colorOption', 'cvss'); 
}

function colorByCriticality() {
   NV.treemap.set('colorOption', 'criticality'); 
}

function colorByCount() {
   NV.treemap.set('colorOption', 'count'); 
}

// Sets the main Backbone data model
function setNBEData(dataset){
  NV.nessus.setData(dataset);
}


function handleGroupAdd(){
  //TODO make sure each IP is only in one group(?)
  //TODO should really be able to remove groups also ...
  var start = $("#ipStart").val();
  var end = $("#ipEnd").val();
  var groupName = $("#groupName").val();
  var weight = $("#defaultWeight").val();
  var newGroup = {"start":start, "end":end, "groupName":groupName, "weight":weight};
  groupList.push(newGroup);

  // TODO needed to notify hierarchy model of groups changes, will be removed 
  //  in backbone rewrite of groups
  NV.nessus.trigger('change:groups');

  // if group added, enabled all buttons
  d3.select('#coloroptions').selectAll('button').attr('disabled', null);
  d3.select('#sizeoptions').selectAll('button').attr('disabled', null);
  // also remove title
  d3.select('#coloroptions').selectAll('button').attr('title', null);
  d3.select('#sizeoptions').selectAll('button').attr('title', null);

  updateCurrentGroupTable(); //why is this needed here?  Somehow affects table re-drawing?
}

// remove loaded data
function clearData() {
  eventList = {};
  groupList = [];
  
  // TODO: RESET THE VIS HERE!
  // TODO: Ensure the groups page updates on new file
  
  $('#file-list').html('');
  $('#file-reset-btn').addClass('disabled');
  $('#file-continue-btn').addClass('disabled');

  $('#groups-continue-btn').addClass('disabled');

  $('#groupsTabNav').addClass('disabled');
  $('#visTabNav').addClass('disabled');

}

function dataTabActive() {
  $('#file-status-msg').html('');
  $('#file-status').alert('close');
}

function dataLoaded(fileName) {
  $('#groupsTabNav').removeClass('disabled');
  
  $('#file-status').css('display', 'block');
  $('#file-status').addClass('alert-success');
  $('#file-status-msg').html('<i class="icon-file"></i> <strong>' + fileName + '</strong> loaded in browser.');
  
  $('#file-list').append(' <i class="icon-file"></i> ' + fileName);

  $('#file-reset-btn').removeClass('disabled');  
  $('#file-continue-btn').removeClass('disabled');

}

function groupsTabActive(){
  if( ! eventList ) {
    updateEventList();
  }
  updateCurrentGroupTable();
  
  $('#visTabNav').removeClass('disabled');
  $('#groups-continue-btn').removeClass('disabled');
  
}

function visTabActive(){
  //in case groups tab did not set it.
  if( ! eventList ) {
    updateEventList();
    updateCurrentGroupTable();
  }

  // show tooltip intro
  $('#helpIcon').tipsy('show');
  setTimeout(function() {
    $('#helpIcon').tipsy('hide');
  }, 2500);

  NV.treemapView.render();
}

function updateEventList(){
  var nbeItems1 = "",
      nbeItems2 = "";

  nbeItems1 = parseNBEFile( nbeText1 );
  eventList = nbeItems1;
  if(nbeText2.trim() !== ""){
    NV.nessus.set('isChangeVis', true);
    nbeItems2 = parseNBEFile( nbeText2 );
    eventList = mergeNBEs(nbeItems1, nbeItems2);
  }
}

function updateCurrentGroupTable(){

  if( ! eventList ){ //have never seen this happen, but leaving in for now --mdi
    console.log("updateCurrentGroupTable needed to update eventList: this is unexpected.");
    updateEventList();
  }

  //build default group list
//  console.log("event list is " + JSON.stringify(eventList));
  var ips = findIPsInList(eventList);
  //console.log("have these IPs: " + JSON.stringify(ips));

  //add to the default group.
  //NOTE we are building this list of groups:ips, instead of the two seperate lists we already have, so that all machines in a group are next to each other in the table.  TODO might be cleaner to just do this in buildTable?  No other fns need this list currently.
  groups = {};
  for( var i=0; i < ips.length; i++ ){
    var groupName = findGroupName(ips[i]);
    var weight = 1; //default
    for(var j=0; j<groupList.length; j++){
      if(groupList[j].groupName === groupName){
        weight = groupList[j].weight;
      }
    }
    var entry = {"ip": ips[i], "weight": weight};
//    console.log("found that ip " + ips[i] + " is in group " + groupName);
    if( !groups[groupName] ){
      groups[groupName] = [];
    }
    groups[groupName].push(entry);
  }

  //console.log("current group list is: " + JSON.stringify(groups) );

  //display the (default) groups and weights for all machines.
  buildTable(groups);

  //add group name to item in crossfilter
  eventList = addGroupInfoToData(groups, eventList);

  // sets the backbone data model
  setNBEData(eventList);
}

//TODO
//this will be somewhat slow, O(n^2), no easy way around it.
//note this will modify nbeItems2 and not modify nbeItems1.  Can change this if needed later.
function mergeNBEs(nbeItems1, nbeItems2){

  var result = []
    , openItems = 0
    , changedItems = 0
    , found
    , i
    , j
    , item;

  function compareEntries(a, b){ //true if equal, false if not
    if(a.ip === b.ip && a.vulnid === b.vulnid && a.vulntype === b.vulntype && a.cvss === b.cvss && a.port === b.port){
      return true;
    }
    else {
      return false;
    }
  }

  //iterate through first list, find matching items in second list. mark them 'open' in result and remove from second list.
  //if no matching item is found, mark it as 'changed' in first.
  for(i=0; i<nbeItems1.length; i++){
    found = false;
    for(j=0; j<nbeItems2.length; j++){
      if( compareEntries(nbeItems1[i], nbeItems2[j]) ){
        found = true;
        item = nbeItems1[i];
        item.state = 'open';
        result.push(item);
        nbeItems2.splice(j, 1);
        openItems +=1;
        break;
      }
    }
    if(found === false){
      item = nbeItems1[i];
      item.state = 'fixed';
      result.push(item);
      changedItems +=1;
    }
  }
  console.log("open items: " + openItems);
  console.log("changed items: " + changedItems);
  console.log("new items: " + nbeItems2.length);
  //handle items remaining in second list. (append to result list, mark 'new')
  while( nbeItems2.length > 0){
    item = nbeItems2.pop();
    item.state = 'new';
    result.push(item);
  }

  return result;
}

function findIPsInList(eventList){
  var ips = {}; //making a fake set here.
  for( var i=0; i < eventList.length; i++ ){
    ips[eventList[i].ip] = true;
  }
  ips = Object.keys(ips); //only need to keep this
  return ips;
}

function findGroupName(ip){
  var testAddr = ip.split('.');
  if( testAddr.length !== 4){
    throw "address of " + groupList[i].end + " is invalid";
  }

  function isAfter(start, test){ //after or equal will return true
    for(var i=0; i<4; i++){
      if(parseInt(start[i], 10) > parseInt(test[i], 10)){
        return false;
      }
    }
    return true;
  }

  function isBefore(end, test){ //before or equal
    return isAfter(test, end);
  }

  //grouplist contains a list of {start, end, groupName, weight}
  for(var i=0; i<groupList.length; i++){
    var start = groupList[i].start.split('.');
    if( start.length !== 4){
      throw "start address of " + groupList[i].start + " is invalid";
    }
    var end = groupList[i].end.split('.');
    if( end.length !== 4){
      throw "end address of " + groupList[i].end + " is invalid";
    }
    //console.log(groupList[i].groupName + ": isAfter(" + groupList[i].start + ", " + ip + ") returned " + isAfter(start, testAddr) );
    //console.log(groupList[i].groupName + ": isBefore(" + groupList[i].end  + ", " + ip + ") returned " + isBefore(end, testAddr) );
    if( isAfter(start, testAddr) && isBefore(end, testAddr) ){
      return groupList[i].groupName;
    }
  }
  return "none"; //not found; "none" is the default label for table.
}

function addGroupInfoToData(groups, eventList){
  var events = []
    , ips = {} //make a map of ip:{group, weight}
    , groupNames = Object.keys(groups)
    , i
    , j;
  for( j=0; j < groupNames.length; j++ ){
    var machines = groups[groupNames[j]];
    for( i=0; i < machines.length; i++ ){
      ips[machines[i].ip] = {"group": groupNames[j], "weight": machines[i].weight};
    }
  }

  for( i=0; i < eventList.length; i++ ){
    events.push(eventList[i]);
    events[i].group  = ips[eventList[i].ip].group;
    events[i].criticality = parseInt(ips[eventList[i].ip].weight, 10);
  }
  return events;
}

function buildTable(groups){
  $('#currentGroupTable').select('tbody').html("");
  var weightSelector, row;
  var groupNames = Object.keys(groups);
  for( var j=0; j < groupNames.length; j++ ){
    var machines = groups[groupNames[j]];
    for( var i=0; i < machines.length; i++ ){
      weightSelector = '<select class="weightSelect" id="weightSelect' + machines[i].ip.split('.').join('_') + '"';
      weightSelector += '><option value="1">1 (lowest)</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10 (highest)</option></select>';
      row = '<tr>';
      row += '<td>'+ groupNames[j] +'</td><td>'+ machines[i].ip +'</td>';
      row += '<td>'+ weightSelector +'</td>';
      row += '</tr>';
      $('#currentGroupTable').select('tbody').append(row);
      $('#weightSelect' + machines[i].ip.split('.').join('_') ).children().eq(machines[i].weight-1).attr("selected","selected");
      //console.log( $('#weightSelect' + machines[i]["ip"].split('.').join('_') ).select('option').eq(machines[i]["weight"]-1).html() );
    }
  }
}

//TODO has to be on a server for this to work?  Go figure.
//rather loosely based on these examples http://www.html5rocks.com/en/tutorials/file/dndfiles/
var handleFileSelect = function (element) {
  
  var holder = document.getElementById(element);
  
  if (typeof window.FileReader === 'undefined') {
    $('#file-status').css('display', 'block');
    $('#file-status').addClass('alert-error');
    console.log('FileReader not supported');
  } 
  else {
    console.log('FileReader supported');
  }
 
  holder.ondragover = function () { 
    this.className = 'hover'; 
    return false; 
  };
  
  holder.ondragend = function () { 
    this.className = ''; 
    return false; 
  };
  
  holder.ondrop = function (e) {
    this.className = '';
    e.preventDefault();

    var files = e.dataTransfer.files,
        f = files[0];

    holder.loadFile(f);
                      
    return false;
  }; 

  holder.loadFile = function(f) {
    console.log('called loadFile');

    var reader = new FileReader();
                      
    reader.readAsText(f); //utf-8 encoding is default

    reader.onload = function (event) {
      // if this is the first file, load to nbeText1
      // if not, then any additional files are saved to nbeText2
      if ( nbeText1.trim() === '' ) {
        nbeText1 = event.target.result;
      }
      else {
        nbeText2 = event.target.result;
      }
      console.log('Loaded file: ' + f.name);

      dataLoaded(f.name);
    };

    reader.onerror = function() {
      $('#file-status').css('display', 'block');
      $('#file-status').addClass('alert-error');
      $('#file-status-msg').html('could not parse file ' + f.name + ' as text');
    };

    return false;
  };
  
};


// load a sample data file
$( '#sampleDataLink' ).click(function() {
  var file = 'data/testNetworkOpen.nbe';
  $.get(file, function (data) {
    nbeText1 = data;
    dataLoaded('Sample file: ' + file);
  });  
});


// initialization
$().ready(function () {

  // help tooltips
  $('.hierarchyHelp').tipsy({trigger: 'manual', fade: true, gravity: 'w', offset: -60});
  $('.treemapHelp').tipsy({trigger: 'manual', fade: true, gravity: 's', offset: -250});
  $('.nessusHelp').tipsy({trigger: 'manual', fade: true, gravity: 'e'});
  $('.filterHelp').tipsy({trigger: 'manual', fade: true, gravity: 's'});

  // help tooltips trigger
  $('#helpIcon').tipsy({trigger: 'manual', fade: true, gravity: 'e'});

  $('#helpIcon').on('mouseover', function(){
    $('.help').tipsy('show'); 
  });
  $('#helpIcon').on('mouseout', function(){
    $('.help').tipsy('hide'); 
  });


  // set up file drag and drop
  handleFileSelect('file-drop');

  // reset the data
  $('#file-reset-btn').click(function(event) {
    window.location.reload();
    //clearData();
  });  

  // data tab events
  $('#dataTab1Link').click(function(event) {
    event.preventDefault();
    dataTabActive();
  });

  // group tab events
  $('#file-continue-btn').click(function(event) {
    $('#groupsTabLink').tab('show');
    groupsTabActive();
  });
  
  $('#groupsTabLink').click(function(event) {
    event.preventDefault();
    groupsTabActive();
  });

  // set up button for adding new group
  $('#addGroupBtn').click(function(event) {
    handleGroupAdd();
  });
 
  // vis tab events
  $('#visTabLink').on('show', function(){
    // TODO the timeout can be removed when we can trigger visTabActive _after_ the tab loads (see $('#visTabLink')... below)
    setTimeout(function() {
      visTabActive();
    }, 100); 
  });

  $('#groups-continue-btn').click(function(event) {
    $('#visTabLink').tab('show');
  });
  
  // auto-triggers the 'show' event
  $('#visTabLink').click(function(event) {
    event.preventDefault();
  });  

 
});

//var sys = require("util")

/**
 * Parses a nessus result line and handles missing fields.
 * @param nessStr - nbe result string line
 * @return - structure containing th eip, vulnid, vulntype, cvss and port
 */
var parseNessusResult = function(nessStr){
    var scoreReg = /CVSS Base Score : (\d+\.\d+)/;

    var portReg = /\D+ \((\d{1,7})\D+\)/;
    var splitNess = nessStr.split("|");
    var ip = splitNess[2];
    var code = parseFloat(splitNess[4]);
    var holeNote = splitNess[5];
    if(scoreReg.test(nessStr)){
        var score = parseFloat(scoreReg.exec(nessStr)[1]);
    }
    else{
        var score = 1.0;
    }
    if(portReg.test(nessStr)){
        var port = parseFloat(portReg.exec(nessStr)[1]);
    }
    else{
        var port = 'notes';
    }
    

    return {"ip": (ip === undefined ? "" : ip),
        "vulnid": (isNaN(code) ? 0 : code),
        "vulntype":(holeNote === undefined ? "" : holeNote.indexOf('Note') !== -1 ? 'note' : 'hole'),
        "cvss": score,
        "value": 1,
        "port":port};
}

/**
 * @param stampString - timestamp line from an NBE file.
 * @return - milliseconds between epoch and the time in the stamp.
 */
var parseNessusTimeStamp = function(stampString){
    var moment = require("moment")
    var timeFormat = "ddd MMM DD HH:mm:ss YYYY"
    var splitInput = stampString.split("|")
    
    var time = moment(splitInput[splitInput.length - 2], timeFormat)
    //var time = splitInput[splitInput.length - 2]
    return time.valueOf()
}

/**
 * @param line - line to be tested.
 * @return - returns true if the line is a time line containing a timestamp.
 */
var hasTime = function(line){
    var splits = line.split("|")
    return (splits[splits.length - 2].length > 0 && splits[0] == "timestamps")
}

/**
 * @param line - line to be tested.
 * @return - returns true if the line is a result line and false otherwise.
 */
var isResult = function(line){
    return(line.split("|")[0] === "results")
}

/**
 * @param nbe - a string representing the contents of a NBE file.
 * @return - array where each entry is a result from the NBE file.
 */
var parseNBEFile = function(nbe){
    var lines = nbe.split("\n")
    var currentTime = 0
    var returnArray = new Array(2)

    for(var i = 0; i < lines.length; i++){
        if(isResult(lines[i])){
            returnArray.push(parseNessusResult(lines[i]))
        }
    }
    return returnArray.filter(function(){return true});//removes nulls
}

//module.exports.parseNessusResult = parseNessusResult;
//module.exports.parseNessusTimeStamp = parseNessusTimeStamp;
//module.exports.parseNBEFile = parseNBEFile;
